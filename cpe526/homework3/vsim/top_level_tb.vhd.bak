use WORK.all;
library ieee;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;
use IEEE.std_logic_textio.all;
use std.TEXTIO.all;

entity LIGHT_TEST_BENCH is
end LIGHT_TEST_BENCH;

library ieee;
use IEEE.std_logic_1164.all;

architecture  TEST of LIGHT_TEST_BENCH is

    component stop_light_logic
    port
    (
        reset : in std_logic;
        start : in std_logic;
        clock : in std_logic;

        red : out std_logic;
        yellow : out std_logic;
        green : out std_logic
    );
  end component;

  component CLOCK_DIVIDER
    Port (
          clk_in   : in std_logic;
          clk_out  : out std_logic
    );
  end component;

  --for U2 : LIGHT use entity work.light(synth);
    signal CLK : std_logic := '0';
    signal DIVIDED_CLK : std_logic := '0';
    signal delayed : std_logic := '0';
    signal reset, start, red, R_Correct, yellow, Y_Correct, green, G_Correct : std_logic;

begin
    process(CLK)
    begin
        CLK <= not CLK after 1000 ns;
    end process;

    U1: CLOCK_DIVIDER port map 
    (
        clk, 
        divided_clk
    );
    
    U2: stop_light_logic port map 
    (
        reset, 
        delayed, 
        start, 
        red, 
        yellow, 
        green
    ); 

    process
        variable counter : natural := 0;
        variable vline : LINE;
        variable V : std_logic_vector (5 downto 0); -- 6 bits
        variable VSPACE : character;
        file invect : TEXT is "race.txt";

    begin
        readline(invect, vline); -- discard fireset line
        readline(invect, vline);
        read(vline, V(1 downto 0));
        read(vline, VSPACE);
        read(vline, V(4 downto 2));
        reset <= V(1);
        start <= V(0);
        R_Correct <= V(4);
        Y_Correct <= V(3);
        G_Correct <= V(2);

        while not(ENDFILE(invect)) loop -- while loop

        wait until DIVIDED_CLK = '1';
        readline(invect, vline);
        read(vline, V(1 downto 0));
        read(vline, VSPACE);
        read(vline, V(4 downto 2));

        reset <= V(1);
        start <= V(0);
        R_Correct <= V(4);
        Y_Correct <= V(3);
        G_Correct <= V(2);

        delayed <= DIVIDED_CLK;

        wait until DIVIDED_CLK = '0'; -- wait until next high clock
        delayed <= DIVIDED_CLK;
        wait for 200 ns;

        end loop;
        wait;
    end process;
end TEST;

