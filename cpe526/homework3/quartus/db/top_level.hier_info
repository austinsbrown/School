|top_level
reset => stop_light_logic:s_l_l.reset
start => stop_light_logic:s_l_l.start
clock => clock_divider:c_d.clk
red << stop_light_logic:s_l_l.red
yellow << stop_light_logic:s_l_l.yellow
green << stop_light_logic:s_l_l.green


|top_level|clock_divider:c_d
clk => temp.CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => count[4].CLK
clk => count[5].CLK
clk => count[6].CLK
clk => count[7].CLK
clk => count[8].CLK
clk => count[9].CLK
clk => count[10].CLK
clk => count[11].CLK
clk => count[12].CLK
clk => count[13].CLK
clk => count[14].CLK
clk => count[15].CLK
clk => count[16].CLK
clk => count[17].CLK
clk => count[18].CLK
clk_out <= temp.DB_MAX_OUTPUT_PORT_TYPE


|top_level|stop_light_logic:s_l_l
reset => state.reset_state.OUTPUTSELECT
reset => state.red_state.OUTPUTSELECT
reset => state.yellow_state.OUTPUTSELECT
reset => state.green_state1.OUTPUTSELECT
reset => state.green_state2.OUTPUTSELECT
reset => state.green_state3.OUTPUTSELECT
start => state_process.IN0
clock => ~NO_FANOUT~
red <= red_t.DB_MAX_OUTPUT_PORT_TYPE
yellow <= yellow_t.DB_MAX_OUTPUT_PORT_TYPE
green <= green_t.DB_MAX_OUTPUT_PORT_TYPE


